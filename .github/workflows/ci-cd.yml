name: CI/CD

on:
  push:
    branches: [ '**' ] # this triggers only on branch commits, which prevents triggering off of tag-only commits
    paths-ignore:
      - .github/workflows/container-release.yml
      - .github/workflows/move-tags.yml
  workflow_dispatch:

env:
  DENO_DIR: .deno_cache
  XZ_DEFAULTS: "-T0 "
  # -T0 tells tar's xz to use as many threads as there are CPUs

concurrency:
  group: ${{ github.ref }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      previous-release-tag: ${{ steps.parse.outputs.previous-release-tag }}
      releasable: ${{ steps.parse.outputs.releasable }}
      semver: ${{ steps.parse.outputs.semver }}
      tag-exists: ${{ steps.parse.outputs.tag-exists }}
    steps:
      - uses: actions/checkout@v3
      - uses: pkgxdev/dev@v0
      - name: Parse version
        id: parse
        uses: ./.github/actions/version
        with:
          semver: ${{ env.VERSION }}
      - name: Show outputs
        run: echo -e "Outputs:\n${{ toJSON(steps.parse.outputs) }}"

  tests:
    strategy:
      fail-fast: false
      matrix:
        entry:
          - os: ubuntu-latest
            cmd: deno task test
          - os: ubuntu-latest
            cmd: deno task lint
          - os: macos-latest
            cmd: deno task test
    runs-on: ${{ matrix.entry.os }}
    name: ${{ matrix.entry.cmd }} (on ${{ matrix.entry.os }})
    steps:
      - uses: actions/checkout@v3
      - uses: pkgxdev/dev@v0

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-${{ matrix.entry.cmd }}-${{ hashFiles('deno.lock') }}

      - run: ${{ matrix.entry.cmd }}

  bundle-source-code:
    runs-on: ubuntu-latest
    needs: [ version ]
    env:
      FILENAME: deliverymetrics-v${{ needs.version.outputs.semver }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: ${{ env.FILENAME }}

      - name: Clean
        run: cd ${{ env.FILENAME }} && rm -rf .github .git .gitignore

      - name: Stamp version
        run: ./$FILENAME/bin/stamp-version '${{ needs.version.outputs.semver }}' $FILENAME

      - name: Tarball source-code
        run: tar cJf $FILENAME.tar.xz $FILENAME

      - name: Upload source-code
        uses: actions/upload-artifact@v3
        with:
          name: source-code
          path: ${{ env.FILENAME }}.tar.xz
          if-no-files-found: error

  compile:
    needs: [ version, bundle-source-code ]
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
            build-id: linux+x86-64
            os: ubuntu-latest

          - target: x86_64-pc-windows-msvc
            suffix: .exe
            build-id: pc+x86-64
            os: ubuntu-latest

          - target: x86_64-apple-darwin
            build-id: mac+x86-64
            os: macos-latest

          - target: aarch64-apple-darwin
            build-id: mac+arm64
            os: macos-latest
    runs-on: ${{ matrix.platform.os }}
    name: ${{ matrix.platform.build-id }}
    steps:
      - name: Download source-code artifact
        uses: actions/download-artifact@v3
        with:
          name: source-code
      - name: Unpack downloaded artifact
        run: tar xJf deliverymetrics-v${{ needs.version.outputs.semver }}.tar.xz --strip-components=1
      - uses: pkgxdev/dev@v0

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-compile-${{ hashFiles('deno.lock') }}

      - run: SUFFIX="${{ matrix.platform.suffix }}" EXTRA_ARGS="--target ${{ matrix.platform.target }}" deno task compile

      - name: Create tarball from compiled binary
        run: tar cJf deliverymetrics-v${{ needs.version.outputs.semver }}+${{ matrix.platform.build-id }}.tar.xz deliverymetrics${{ matrix.platform.suffix }}

      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            deliverymetrics-v${{ needs.version.outputs.semver }}+${{ matrix.platform.build-id }}.tar.xz
            deliverymetrics-v${{ needs.version.outputs.semver }}+${{ matrix.platform.build-id }}.tar.xz.asc
          if-no-files-found: error

  release:
    needs: [ version, tests, compile ]
    runs-on: ubuntu-latest
    name: ${{ needs.version.outputs.releasable == 'true' && 'release' || 'release (dry-run)' }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Generate release description
        run: |
          log_content() {
            local content="$1"
            local label="${2:-}"
          
            if [[ -n "$label" ]]; then
              # Replace the beginning of each line with two spaces
              local indented_content="${content//$'\n'/$'\n'  }"
              printf "%s:\n  %s\n" "$label" "$indented_content"
            else
              echo "$content"
            fi
          }
          CHANGELOG_URL="https://github.com/${{ github.event.repository.full_name }}/compare/${{ needs.version.outputs.previous-release-tag }}...v${{ needs.version.outputs.semver }}"
          echo "BODY=**Full Changelog**: $CHANGELOG_URL" >> $GITHUB_ENV
          echo ::group::Set outputs
          log_content "$(cat "$GITHUB_ENV")" "GITHUB_ENV"
          echo ::endgroup::

      - uses: softprops/action-gh-release@v1
        if: needs.version.outputs.releasable == 'true'
        with:
          body: ${{ env.BODY }}
          fail_on_unmatched_files: true
          files: |
            binaries/* 
            source-code/*
          generate_release_notes: false
          tag_name: v${{ needs.version.outputs.semver }}
          token: ${{ secrets.PAT }} # using our own PAT so other workflows run
